{
  "hash": "2d01f4556987c6f9bea0d33176cd83ac",
  "result": {
    "markdown": "---\ntitle: \"e-Stat🤝R\"\nsubtitle: \"Tokyo.R #108\"\nauthor: UchidaMizuki\ndate: \"2023-09-02\"\nfooter: <https://github.com/UchidaMizuki/jpstat>\nformat: \n  revealjs\n---\n\n\n## [e-Stat](https://www.e-stat.go.jp)とは❓\n\n-   日本の政府統計ポータルサイト\n-   多くの統計データが検索・閲覧・ダウンロードできる\n\n![画像出典：e-Stat](https://www.e-stat.go.jp/sites/default/files/inline-images/e-stat_001_1.png){fig-align=\"center\"}\n\n## e-Statの使い方📌\n\n### 1. データベースを検索🔎\n\n![画像出典：e-Stat](https://www.e-stat.go.jp/sites/default/files/inline-images/e-stat_003.png){fig-align=\"center\"}\n\n## e-Statの使い方📌\n\n### 2. データベースを選択👆\n\n![画像出典：e-Stat](https://www.e-stat.go.jp/sites/default/files/inline-images/e-stat_039.png){fig-align=\"center\"}\n\n## e-Statの使い方📌\n\n### 3. データ項目を選択✅\n\n![画像出典：e-Stat](https://www.e-stat.go.jp/sites/default/files/inline-images/e-stat_040.png){fig-align=\"center\"}\n\n## e-Statの使い方📌\n\n### 4. データをダウンロード💾\n\n![画像出典：e-Stat](https://www.e-stat.go.jp/sites/default/files/inline-images/dbview01_1.png){fig-align=\"center\"}\n\n## e-Stat🤝R {auto-animate=\"true\"}\n\n### [e-Stat API](https://www.e-stat.go.jp/api/)\n\nRからもe-Statを利用可能⏩[estatapi](https://yutannihilation.github.io/estatapi/)パッケージ📦\n\n1.  データベースを検索🔎\n2.  データベースを選択👆\n3.  データ項目を選択✅\n4.  データをダウンロード💾\n\n## e-Stat🤝R {auto-animate=\"true\"}\n\n### [e-Stat API](https://www.e-stat.go.jp/api/)\n\nStep 3以降のデータ抽出・整形がやや難しい😖\n\n3.  データ項目を選択✅\n4.  データをダウンロード💾\n\n::: {.fragment .fade-in}\n⏬\n\n### [jpstat](https://uchidamizuki.github.io/jpstat/)📦\n\n-   dplyr📦とパイプ（`|>, %>%`）でデータ抽出可能👍\n-   統計データ収集の効率性・再現性向上👍\n:::\n\n## jpstat📦の使い方📌\n\n### 1. アプリケーションIDを設定[^1]\n\n[^1]: 事前に[利用規約](https://www.e-stat.go.jp/api/api-info/api-guide)をご確認ください\n\n-   e-Stat APIの利用には[ユーザ登録](https://www.e-stat.go.jp/mypage/user/preregister)が必要\n-   [利用ガイド](https://www.e-stat.go.jp/api/api-info/api-guide)に従ってアプリケーションIDを取得\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"8-9\"}\n# パッケージのインストール（必要なら）・読み込み\nif (!require(\"tidyverse\")) install.packages(\"tidyverse\")\nif (!require(\"jpstat\")) install.packages(\"jpstat\")\n\nlibrary(tidyverse)\nlibrary(jpstat)\n\n# グローバル変数にアプリケーションIDを追加\nSys.setenv(ESTAT_API_KEY = \"あなたのアプリケーションID\")\n```\n:::\n\n\n## jpstat📦の使い方📌 {auto-animate=\"true\"}\n\n### 2. データ項目を取得[^2]\n\n[^2]: メタ情報と呼ばれています．\n\n[家計調査](https://www.e-stat.go.jp/dbview?sid=0003343671)データベースを対象[^3]\n\n[^3]: [estatapi](https://yutannihilation.github.io/estatapi/)📦のREADMEを参考に．ただし，ここでは2023年データを使用．\n\n\n::: {.cell}\n\n```{.r .cell-code}\nestat(statsDataId = \"0003343671\") # statsDataId: URL等に記載されている統計表ID\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# ☐ tab:   表章項目               [1] <code, name, level>\n# ☐ cat01: 品目分類（2020年改定） [690] <code, name, level, unit, parentCode>\n# ☐ cat02: 世帯区分               [4] <code, name, level>\n# ☐ area:  地域区分               [53] <code, name, level>\n# ☐ time:  時間軸（月次）         [462] <code, name, level>\n# \n# Please `activate()`.\n```\n:::\n:::\n\n\n## jpstat📦の使い方📌 {auto-animate=\"true\"}\n\n### 3. データ項目を抽出\n\n`activate(), filter()`でチョコレート関連品目を抽出\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2-3\"}\nestat(statsDataId = \"0003343671\") |> \n  activate(cat01) |> \n  filter(str_detect(name, \"チョコレート\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# ☐ tab:   表章項目               [1] <code, name, level>\n# ☒ cat01: 品目分類（2020年改定） [2] <code, name, level, unit, parentCode>\n# ☐ cat02: 世帯区分               [4] <code, name, level>\n# ☐ area:  地域区分               [53] <code, name, level>\n# ☐ time:  時間軸（月次）         [462] <code, name, level>\n# \n# A tibble: 2 × 5\n  code      name                 level unit  parentCode\n  <chr>     <chr>                <chr> <chr> <chr>     \n1 010800130 352 チョコレート     5     円    010800000 \n2 010800140 353 チョコレート菓子 5     円    010800000 \n```\n:::\n:::\n\n\n## jpstat📦の使い方📌 {auto-animate=\"true\"}\n\n### 3. データ項目を抽出\n\n複数の抽出処理をパイプ（`|>, %>%`）でつなげられる\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5-9\"}\nestat(statsDataId = \"0003343671\") |> \n  activate(cat01) |> \n  filter(str_detect(name, \"チョコレート\")) |> \n  \n  activate(area) |> \n  filter(name == \"全国\") |> \n  \n  activate(time) |> \n  filter(str_detect(name, \"2023年[1-3]月\"))\n```\n:::\n\n\n## jpstat📦の使い方📌 {auto-animate=\"true\"}\n\n### 4. データをダウンロード\n\n`collect()`でデータをダウンロード\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1,11\"}\nchocolate <- estat(statsDataId = \"0003343671\") |> \n  activate(cat01) |> \n  filter(str_detect(name, \"チョコレート\")) |> \n  \n  activate(area) |> \n  filter(name == \"全国\") |> \n  \n  activate(time) |> \n  filter(str_detect(name, \"2023年[1-3]月\")) |> \n  \n  collect(n = \"金額\") # `n`で収集データの列名を指定\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe total number of data is 12.\n```\n:::\n:::\n\n\n## jpstat📦の使い方📌 {auto-animate=\"true\"}\n\n### 4. データをダウンロード\n\nこのままでは列名がわかりづらく不要な列が多い😖\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(chocolate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 18\n  tab_code tab_name tab_level cat01_code cat01_name       cat01_level cat01_unit\n  <chr>    <chr>    <chr>     <chr>      <chr>            <chr>       <chr>     \n1 01       金額     \"\"        010800130  352 チョコレート 5           円        \n2 01       金額     \"\"        010800130  352 チョコレート 5           円        \n3 01       金額     \"\"        010800130  352 チョコレート 5           円        \n4 01       金額     \"\"        010800130  352 チョコレート 5           円        \n5 01       金額     \"\"        010800130  352 チョコレート 5           円        \n6 01       金額     \"\"        010800130  352 チョコレート 5           円        \n# ℹ 11 more variables: cat01_parentCode <chr>, cat02_code <chr>,\n#   cat02_name <chr>, cat02_level <chr>, area_code <chr>, area_name <chr>,\n#   area_level <chr>, time_code <chr>, time_name <chr>, time_level <chr>,\n#   金額 <chr>\n```\n:::\n:::\n\n\n## jpstat📦の使い方📌 {auto-animate=\"true\"}\n\n### 5. データを整形\n\n`rekey(), select()`で収集データの列名を指定できる\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2,4,7,9,12\"}\nchocolate <- estat(statsDataId = \"0003343671\") |> \n  activate(tab) |> select() |> # 何も`select()`しない場合は列名が消える\n    \n  activate(cat01) |> rekey(\"品目分類\") |> select(name) |> \n  filter(str_detect(name, \"チョコレート\")) |> \n  \n  activate(cat02) |> rekey(\"世帯区分\") |> select(name) |>\n  \n  activate(area) |> rekey(\"地域区分\") |> select(name) |>\n  filter(name == \"全国\") |> \n  \n  activate(time) |> rekey(\"月次\") |> select(name) |>\n  filter(str_detect(name, \"2023年[1-3]月\")) |> \n  \n  collect(n = \"金額\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe total number of data is 12.\n```\n:::\n:::\n\n\n## jpstat📦の使い方📌 {auto-animate=\"true\"}\n\n### 5. データを整形\n\n列名がわかりやすくなり不要な列が消えた👍\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(chocolate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  品目分類_name    世帯区分_name                   地域区分_name 月次_name 金額 \n  <chr>            <chr>                           <chr>         <chr>     <chr>\n1 352 チョコレート 二人以上の世帯（2000年～）      全国          2023年1月 869  \n2 352 チョコレート 二人以上の世帯（2000年～）      全国          2023年2月 1307 \n3 352 チョコレート 二人以上の世帯（2000年～）      全国          2023年3月 656  \n4 352 チョコレート 二人以上の世帯のうち勤労者世帯… 全国          2023年1月 998  \n5 352 チョコレート 二人以上の世帯のうち勤労者世帯… 全国          2023年2月 1491 \n6 352 チョコレート 二人以上の世帯のうち勤労者世帯… 全国          2023年3月 749  \n```\n:::\n:::\n\n\n## まとめ📋\n\n-   jpstat📦でe-Statデータの収集を簡単に\n-   他の統計APIにも対応するかも\n    -   実験的にRESAS APIなどにも対応\n-   IssueやPull Requestは[UchidaMizuki/jpstat](https://github.com/UchidaMizuki/jpstat)まで\n\n## Enjoy🍫\n\n余談：2月はチョコレート消費が増えることがわかった❗\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nchocolate |> \n  mutate(世帯区分_name = 世帯区分_name |> \n           str_remove(\"（2000年～）$\") |> \n           as_factor(),\n         金額 = parse_number(金額)) |> \n  ggplot(aes(月次_name, 金額,\n             fill = 世帯区分_name)) +\n  geom_col(position = \"dodge\") +\n  scale_x_discrete(NULL) +\n  scale_y_continuous(\"1世帯あたり金額［円］\",\n                     labels = scales::label_comma()) +\n  scale_fill_brewer(\"世帯区分\",\n                    palette = \"Paired\") +\n  facet_wrap(~ 品目分類_name)\n```\n\n::: {.cell-output-display}\n![](slide-estat-with-r_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n",
    "supporting": [
      "slide-estat-with-r_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}